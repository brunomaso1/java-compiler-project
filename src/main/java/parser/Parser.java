
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 31 20:20:25 GMT-03:00 2016
//----------------------------------------------------

package parser;

import ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 31 20:20:25 GMT-03:00 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\002\007\000\002\002" +
    "\004\000\002\002\005\000\002\002\006\000\002\002\010" +
    "\000\002\002\006\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\004\003\000\002\004\003\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\004\005\000\002\004\005\000\002\005\002\000" +
    "\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\014\017\004\026\006\027\011\031\005\033" +
    "\010\001\002\000\016\017\uffec\022\uffec\026\uffec\027\uffec" +
    "\031\uffec\033\uffec\001\002\000\016\004\012\005\013\006" +
    "\021\007\017\012\016\020\020\001\002\000\004\016\056" +
    "\001\002\000\004\002\055\001\002\000\010\004\012\005" +
    "\013\007\037\001\002\000\016\004\012\005\013\006\021" +
    "\007\017\012\016\020\020\001\002\000\030\010\ufffa\011" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\021\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\034\ufffa\035\ufffa\001\002\000\030\010\ufff9\011" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\021\ufff9\023\ufff9\024\ufff9" +
    "\025\ufff9\034\ufff9\035\ufff9\001\002\000\006\023\023\025" +
    "\047\001\002\000\016\011\027\014\035\015\034\021\032" +
    "\024\031\035\030\001\002\000\012\010\ufff3\013\ufff3\023" +
    "\ufff3\025\ufff3\001\002\000\016\004\012\005\013\006\021" +
    "\007\017\012\016\020\020\001\002\000\012\010\ufff4\013" +
    "\ufff4\023\ufff4\025\ufff4\001\002\000\016\004\012\005\013" +
    "\006\021\007\017\012\016\020\020\001\002\000\012\010" +
    "\uffef\013\uffef\023\023\025\uffef\001\002\000\016\004\012" +
    "\005\013\006\021\007\017\012\016\020\020\001\002\000" +
    "\012\010\uffee\013\uffee\023\uffee\025\uffee\001\002\000\006" +
    "\010\046\023\023\001\002\000\020\010\033\011\027\014" +
    "\035\015\034\021\032\024\031\035\030\001\002\000\010" +
    "\004\012\005\013\007\037\001\002\000\010\004\012\005" +
    "\013\007\037\001\002\000\010\004\012\005\013\007\037" +
    "\001\002\000\010\004\012\005\013\007\037\001\002\000" +
    "\030\010\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\021\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\034\ufff5\035\ufff5\001\002\000" +
    "\010\004\012\005\013\007\037\001\002\000\010\004\012" +
    "\005\013\007\037\001\002\000\030\010\ufff7\011\027\013" +
    "\ufff7\014\ufff7\015\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\034\ufff7\035\ufff7\001\002\000\010\004\012\005\013\007" +
    "\037\001\002\000\012\010\033\011\027\014\035\015\034" +
    "\001\002\000\030\010\ufff6\011\027\013\ufff6\014\ufff6\015" +
    "\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\034\ufff6\035\ufff6" +
    "\001\002\000\020\010\ufff2\011\027\013\ufff2\014\035\015" +
    "\034\023\ufff2\025\ufff2\001\002\000\020\010\ufff1\011\027" +
    "\013\ufff1\014\035\015\034\023\ufff1\025\ufff1\001\002\000" +
    "\020\010\ufff0\011\027\013\ufff0\014\035\015\034\023\ufff0" +
    "\025\ufff0\001\002\000\030\010\ufff8\011\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\021\ufff8\023\ufff8\024\ufff8\025\ufff8\034\ufff8" +
    "\035\ufff8\001\002\000\012\010\uffed\013\uffed\023\uffed\025" +
    "\uffed\001\002\000\014\017\004\026\006\027\011\031\005" +
    "\033\010\001\002\000\022\002\ufffd\017\ufffd\022\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\033\ufffd\001\002\000\012" +
    "\011\027\014\035\015\034\034\052\001\002\000\004\005" +
    "\053\001\002\000\004\016\054\001\002\000\022\002\000" +
    "\017\000\022\000\026\000\027\000\030\000\031\000\033" +
    "\000\001\002\000\004\002\001\001\002\000\022\002\uffff" +
    "\017\uffff\022\uffff\026\uffff\027\uffff\030\uffff\031\uffff\033" +
    "\uffff\001\002\000\006\013\060\023\023\001\002\000\014" +
    "\017\004\026\006\027\011\031\005\033\010\001\002\000" +
    "\022\002\ufffb\017\ufffb\022\ufffb\026\ufffb\027\ufffb\030\062" +
    "\031\ufffb\033\ufffb\001\002\000\014\017\004\026\006\027" +
    "\011\031\005\033\010\001\002\000\022\002\ufffc\017\ufffc" +
    "\022\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\033\ufffc\001" +
    "\002\000\016\017\004\022\066\026\006\027\011\031\005" +
    "\033\010\001\002\000\016\017\uffeb\022\uffeb\026\uffeb\027" +
    "\uffeb\031\uffeb\033\uffeb\001\002\000\022\002\ufffe\017\ufffe" +
    "\022\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\033\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\004\002\006\001\001\000\004\005\063\001" +
    "\001\000\006\003\014\004\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\050\001\001\000\006\003" +
    "\014\004\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\025\004\024\001\001\000\002\001\001\000\006" +
    "\003\014\004\021\001\001\000\002\001\001\000\006\003" +
    "\014\004\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\044\001\001\000\004\003" +
    "\043\001\001\000\004\003\042\001\001\000\004\003\041" +
    "\001\001\000\002\001\001\000\004\003\040\001\001\000" +
    "\004\003\035\001\001\000\002\001\001\000\004\003\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\060\001\001\000\002\001\001" +
    "\000\004\002\062\001\001\000\002\001\001\000\004\002" +
    "\064\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(Symbol currentToken) {
		report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]!", null);
	}

	public static Symbol parse(Reader input) throws Exception {
		return (new Parser(new Lexer(input))).parse();
	}

	public static Symbol parse(String input) throws Exception {
		return parse(new StringReader(input));
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // repeat$stmt ::= repeat$stmt stmt 
            {
              List<Sentencia> RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> $1 = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia $2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Sentencia> $0;
		$1.add($2); $0 = $1;
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat$stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // repeat$stmt ::= 
            {
              List<Sentencia> RESULT =null;
		 List<Sentencia> $0;
		$0 = new ArrayList<Sentencia>();
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat$stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bexp ::= PARENTESIS_IZQUIERDO bexp PARENTESIS_DERECHO 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpresionVerdad $2 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = $2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bexp ::= bexp SIGNO_Y bexp 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionVerdad $1 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionVerdad $3 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Conjuncion($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bexp ::= SIGNO_NO bexp 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionVerdad $2 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Negacion($2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bexp ::= aexp SIGNO_MAYOR_IGUAL aexp 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompararMayorOIgual($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bexp ::= aexp SIGNO_MENOR_IGUAL aexp 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompararMenorOIgual($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bexp ::= aexp SIGNO_IGUAL aexp 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompararIgual($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bexp ::= FALSO 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValorVerdad(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bexp ::= VERDADERO 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValorVerdad(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // aexp ::= PARENTESIS_IZQUIERDO aexp PARENTESIS_DERECHO 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpresionAritmetica $2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = $2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // aexp ::= aexp SIGNO_MENOS aexp 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Resta($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // aexp ::= aexp SIGNO_MAS aexp 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Suma($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // aexp ::= aexp SIGNO_MULT aexp 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiplicacion($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // aexp ::= ID 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable($1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // aexp ::= NUM 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double $1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Numeral($1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= SI bexp ENTONCES stmt 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionVerdad $2 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia $4 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SiEntonces($2, $4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= SI bexp ENTONCES stmt SINO stmt 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpresionVerdad $2 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia $4 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia $6 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SiEntoncesSino($2, $4, $6); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= MIENTRAS bexp HACER stmt 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionVerdad $2 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia $4 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MientrasHacer($2, $4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt ::= PARENTESIS_CURVO_IZQUIERDO repeat$stmt PARENTESIS_CURVO_DERECHO 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> $2 = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Secuencia($2.toArray(new Sentencia[$2.size()])); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt ::= NADA PUNTO 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Secuencia(new Sentencia[0]); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // stmt ::= PONER aexp EN ID PUNTO 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpresionAritmetica $2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String $4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Asignacion($4, $2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= stmt EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia start_val = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

