
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 05 17:45:24 GMT-03:00 2016
//----------------------------------------------------

package parser;

import ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 05 17:45:24 GMT-03:00 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\007\000\002\004\003\000\002\005\003" +
    "\000\002\006\007\000\002\006\004\000\002\006\005\000" +
    "\002\006\006\000\002\006\010\000\002\006\006\000\002" +
    "\006\011\000\002\007\003\000\002\007\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\004\000\002" +
    "\010\005\000\002\010\005\000\002\011\002\000\002\011" +
    "\004\000\002\012\002\000\002\012\004\000\002\013\002" +
    "\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\020\007\014\023\012\032\006\033\011\035" +
    "\015\037\013\042\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\uffff\001\002\000\004\022\110\001\002\000" +
    "\004\006\100\001\002\000\004\002\077\001\002\000\016" +
    "\004\016\005\017\012\025\013\022\016\023\024\024\001" +
    "\002\000\020\023\uffe6\026\uffe6\032\uffe6\033\uffe6\035\uffe6" +
    "\037\uffe6\042\uffe6\001\002\000\010\004\016\005\017\013" +
    "\043\001\002\000\004\006\057\001\002\000\016\004\016" +
    "\005\017\012\025\013\022\016\023\024\024\001\002\000" +
    "\040\004\ufff4\005\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4\040" +
    "\ufff4\041\ufff4\043\ufff4\001\002\000\040\004\ufff3\005\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\025" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\040\ufff3\041\ufff3\043\ufff3" +
    "\001\002\000\006\017\053\027\027\001\002\000\016\015" +
    "\033\020\041\021\040\025\036\030\034\041\035\001\002" +
    "\000\016\004\016\005\017\012\025\013\022\016\023\024" +
    "\024\001\002\000\012\014\uffed\017\uffed\027\uffed\031\uffed" +
    "\001\002\000\012\014\uffee\017\uffee\027\uffee\031\uffee\001" +
    "\002\000\016\004\016\005\017\012\025\013\022\016\023" +
    "\024\024\001\002\000\012\014\uffe9\017\uffe9\027\027\031" +
    "\uffe9\001\002\000\016\004\016\005\017\012\025\013\022" +
    "\016\023\024\024\001\002\000\012\014\uffe8\017\uffe8\027" +
    "\uffe8\031\uffe8\001\002\000\006\014\052\027\027\001\002" +
    "\000\020\014\037\015\033\020\041\021\040\025\036\030" +
    "\034\041\035\001\002\000\010\004\016\005\017\013\043" +
    "\001\002\000\010\004\016\005\017\013\043\001\002\000" +
    "\010\004\016\005\017\013\043\001\002\000\010\004\016" +
    "\005\017\013\043\001\002\000\040\004\uffef\005\uffef\013" +
    "\uffef\014\uffef\015\uffef\017\uffef\020\uffef\021\uffef\025\uffef" +
    "\027\uffef\030\uffef\031\uffef\040\uffef\041\uffef\043\uffef\001" +
    "\002\000\010\004\016\005\017\013\043\001\002\000\010" +
    "\004\016\005\017\013\043\001\002\000\040\004\ufff1\005" +
    "\ufff1\013\ufff1\014\ufff1\015\033\017\ufff1\020\ufff1\021\ufff1" +
    "\025\ufff1\027\ufff1\030\ufff1\031\ufff1\040\ufff1\041\ufff1\043" +
    "\ufff1\001\002\000\010\004\016\005\017\013\043\001\002" +
    "\000\012\014\037\015\033\020\041\021\040\001\002\000" +
    "\040\004\ufff0\005\ufff0\013\ufff0\014\ufff0\015\033\017\ufff0" +
    "\020\ufff0\021\ufff0\025\ufff0\027\ufff0\030\ufff0\031\ufff0\040" +
    "\ufff0\041\ufff0\043\ufff0\001\002\000\020\014\uffec\015\033" +
    "\017\uffec\020\041\021\040\027\uffec\031\uffec\001\002\000" +
    "\020\014\uffea\015\033\017\uffea\020\041\021\040\027\uffea" +
    "\031\uffea\001\002\000\020\014\uffeb\015\033\017\uffeb\020" +
    "\041\021\040\027\uffeb\031\uffeb\001\002\000\040\004\ufff2" +
    "\005\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\025\ufff2\027\ufff2\030\ufff2\031\ufff2\040\ufff2\041\ufff2" +
    "\043\ufff2\001\002\000\012\014\uffe7\017\uffe7\027\uffe7\031" +
    "\uffe7\001\002\000\016\023\012\032\006\033\011\035\015" +
    "\037\013\042\007\001\002\000\024\002\ufff6\023\ufff6\026" +
    "\ufff6\032\ufff6\033\ufff6\034\055\035\ufff6\037\ufff6\042\ufff6" +
    "\001\002\000\016\023\012\032\006\033\011\035\015\037" +
    "\013\042\007\001\002\000\024\002\ufff7\023\ufff7\026\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7\042\ufff7\001" +
    "\002\000\004\010\060\001\002\000\020\005\uffe4\023\uffe4" +
    "\032\uffe4\033\uffe4\035\uffe4\037\uffe4\042\uffe4\001\002\000" +
    "\020\005\064\023\012\032\006\033\011\035\015\037\013" +
    "\042\007\001\002\000\020\005\uffe3\023\uffe3\032\uffe3\033" +
    "\uffe3\035\uffe3\037\uffe3\042\uffe3\001\002\000\004\002\ufffe" +
    "\001\002\000\020\005\ufffd\023\ufffd\032\ufffd\033\ufffd\035" +
    "\ufffd\037\ufffd\042\ufffd\001\002\000\012\015\033\020\041" +
    "\021\040\040\066\001\002\000\004\005\067\001\002\000" +
    "\004\022\070\001\002\000\024\002\ufffb\023\ufffb\026\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\035\ufffb\037\ufffb\042\ufffb\001" +
    "\002\000\020\023\012\026\073\032\006\033\011\035\015" +
    "\037\013\042\007\001\002\000\020\023\uffe5\026\uffe5\032" +
    "\uffe5\033\uffe5\035\uffe5\037\uffe5\042\uffe5\001\002\000\024" +
    "\002\ufff9\023\ufff9\026\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\037\ufff9\042\ufff9\001\002\000\006\027\027\031\075" +
    "\001\002\000\016\023\012\032\006\033\011\035\015\037" +
    "\013\042\007\001\002\000\024\002\ufff8\023\ufff8\026\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\035\ufff8\037\ufff8\042\ufff8\001" +
    "\002\000\004\002\001\001\002\000\004\010\101\001\002" +
    "\000\012\004\uffe2\005\uffe2\013\uffe2\043\uffe2\001\002\000" +
    "\012\004\016\005\017\013\043\043\104\001\002\000\020" +
    "\004\ufffc\005\ufffc\013\ufffc\015\033\020\041\021\040\043" +
    "\ufffc\001\002\000\004\005\106\001\002\000\012\004\uffe1" +
    "\005\uffe1\013\uffe1\043\uffe1\001\002\000\004\022\107\001" +
    "\002\000\024\002\ufff5\023\ufff5\026\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\037\ufff5\042\ufff5\001\002\000\024\002" +
    "\ufffa\023\ufffa\026\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\037\ufffa\042\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\010\002\007\003\003\006\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\020\010\073\001" +
    "\001\000\004\011\070\001\001\000\004\007\064\001\001" +
    "\000\002\001\001\000\006\007\020\010\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\031\010\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\020\010\025\001\001" +
    "\000\002\001\001\000\006\007\020\010\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\050\001\001\000\004\007\047\001\001\000\004\007" +
    "\046\001\001\000\004\007\045\001\001\000\002\001\001" +
    "\000\004\007\044\001\001\000\004\007\041\001\001\000" +
    "\002\001\001\000\004\007\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\053\001\001\000\002\001\001\000\004\006\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\060" +
    "\001\001\000\006\004\061\006\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\101" +
    "\001\001\000\006\005\104\007\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(Symbol currentToken) {
		report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]!", null);
	}

	public static Symbol parse(Reader input) throws Exception {
		return (new Parser(new Lexer(input))).parse();
	}

	public static Symbol parse(String input) throws Exception {
		return parse(new StringReader(input));
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // repeat$paramAexp ::= repeat$paramAexp paramAexp 
            {
              List<ExpresionAritmetica> RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ExpresionAritmetica> $1 = (List<ExpresionAritmetica>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<ExpresionAritmetica> $0;
		$1.add($2); $0 = $1;
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat$paramAexp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // repeat$paramAexp ::= 
            {
              List<ExpresionAritmetica> RESULT =null;
		 List<ExpresionAritmetica> $0;
		$0 = new ArrayList<ExpresionAritmetica>();
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat$paramAexp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // repeat$param ::= repeat$param param 
            {
              List<Variable> RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> $1 = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable $2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Variable> $0;
		$1.add($2); $0 = $1;
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat$param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // repeat$param ::= 
            {
              List<Variable> RESULT =null;
		 List<Variable> $0;
		$0 = new ArrayList<Variable>();
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat$param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // repeat$stmt ::= repeat$stmt stmt 
            {
              List<Sentencia> RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> $1 = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia $2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Sentencia> $0;
		$1.add($2); $0 = $1;
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat$stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // repeat$stmt ::= 
            {
              List<Sentencia> RESULT =null;
		 List<Sentencia> $0;
		$0 = new ArrayList<Sentencia>();
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat$stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bexp ::= PARENTESIS_IZQUIERDO bexp PARENTESIS_DERECHO 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpresionVerdad $2 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = $2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bexp ::= bexp SIGNO_Y bexp 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionVerdad $1 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionVerdad $3 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Conjuncion($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bexp ::= SIGNO_NO bexp 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionVerdad $2 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Negacion($2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bexp ::= aexp SIGNO_MAYOR_IGUAL aexp 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompararMayorOIgual($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bexp ::= aexp SIGNO_MENOR_IGUAL aexp 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompararMenorOIgual($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bexp ::= aexp SIGNO_IGUAL aexp 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompararIgual($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bexp ::= FALSO 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValorVerdad(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bexp ::= VERDADERO 
            {
              ExpresionVerdad RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValorVerdad(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bexp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aexp ::= PARENTESIS_IZQUIERDO aexp PARENTESIS_DERECHO 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpresionAritmetica $2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = $2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // aexp ::= aexp SIGNO_MENOS aexp 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Resta($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // aexp ::= aexp SIGNO_MAS aexp 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Suma($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // aexp ::= aexp SIGNO_MULT aexp 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionAritmetica $1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica $3 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiplicacion($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // aexp ::= ID 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable($1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // aexp ::= NUM 
            {
              ExpresionAritmetica RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double $1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Numeral($1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aexp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= LLAMAR IDFUNC RECIBE repeat$paramAexp PONER_EN ID PUNTO 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String $2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<ExpresionAritmetica> $4 = (List<ExpresionAritmetica>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String $6 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LlamarFuncion($2,$4.toArray(new ExpresionAritmetica[$4.size()]),new Variable($6)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= SI bexp ENTONCES stmt 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionVerdad $2 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia $4 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SiEntonces($2, $4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= SI bexp ENTONCES stmt SINO stmt 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpresionVerdad $2 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia $4 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia $6 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SiEntoncesSino($2, $4, $6); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= MIENTRAS bexp HACER stmt 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionVerdad $2 = (ExpresionVerdad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia $4 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MientrasHacer($2, $4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= CORCHETE_IZQUIERDO repeat$stmt CORCHETE_DERECHO 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> $2 = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Secuencia($2.toArray(new Sentencia[$2.size()])); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= NADA PUNTO 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Secuencia(new Sentencia[0]); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= PONER aexp EN ID PUNTO 
            {
              Sentencia RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpresionAritmetica $2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String $4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Asignacion($4, $2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // paramAexp ::= aexp 
            {
              ExpresionAritmetica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionAritmetica a = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("" + a);
		RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramAexp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // param ::= ID 
            {
              Variable RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable($1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // def ::= FUNCION IDFUNC RECIBE repeat$param stmt 
            {
              Definicion RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String $2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Variable> $4 = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia $5 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncionX($2,$4.toArray(new Variable[$4.size()]),$5);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= stmt 
            {
              Programa RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("" + s); 
		RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= def 
            {
              Programa RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Definicion d = (Definicion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("" + d);
		RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

