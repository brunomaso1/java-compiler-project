package parser;

import ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;

parser code {:

	public void syntax_error(Symbol currentToken) {
		report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]!", null);
	}

	public static Symbol parse(Reader input) throws Exception {
		return (new Parser(new Lexer(input))).parse();
	}

	public static Symbol parse(String input) throws Exception {
		return parse(new StringReader(input));
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}

:}
non terminal Programa prog;
non terminal Definicion def;
non terminal Variable param;
non terminal Sentencia stmt;
non terminal ExpresionAritmetica aexp;
non terminal ExpresionVerdad bexp;
terminal Double NUM;
terminal String ID;
terminal String IDFUNC;
terminal FUNCION;
terminal RECIBE;
terminal COMA;
terminal SIGNO_NO;
terminal PARENTESIS_IZQUIERDO;
terminal PARENTESIS_DERECHO;
terminal SIGNO_MULT;
terminal FALSO;
terminal ENTONCES;
terminal SIGNO_MAS;
terminal SIGNO_MENOS;
terminal PUNTO;
terminal CORCHETE_IZQUIERDO;
terminal VERDADERO;
terminal SIGNO_IGUAL;
terminal CORCHETE_DERECHO;
terminal SIGNO_Y;
terminal SIGNO_MENOR_IGUAL;
non terminal List<Sentencia> repeat$stmt;
non terminal List<Variable> repeat$param;
terminal HACER;
terminal NADA;
terminal MIENTRAS;
terminal SINO;
terminal SI;
terminal SIGNO_DISTINTO;
terminal PONER;
terminal EN;
terminal SIGNO_MAYOR_IGUAL;

precedence left FUNCION;
precedence left SIGNO_Y;
precedence left SIGNO_MAS, SIGNO_MENOS;
precedence left SIGNO_MULT;
precedence left SIGNO_DISTINTO;
precedence left SINO;

start with prog;

prog ::=
		def:d {:  System.out.println("" + d);
		RESULT = d; :} 
	|
		stmt:s {: System.out.println("" + s); 
		RESULT = s; :} 
;

def ::=
		FUNCION:$1 IDFUNC:$2 RECIBE:$3 repeat$param:$4 stmt:$5
		{: RESULT = new FuncionX($2,$4.toArray(new Variable[$4.size()]),$5);
		:}
;
param ::=
		ID:$1 
		{: RESULT = new Variable($1); :}
;

stmt ::=
		PONER:$1 aexp:$2 EN:$3 ID:$4 PUNTO:$5 
		{: RESULT = new Asignacion($4, $2); :}
	|	NADA:$1 PUNTO:$2 
		{: RESULT = new Secuencia(new Sentencia[0]); :}
	|	CORCHETE_IZQUIERDO:$1 repeat$stmt:$2 CORCHETE_DERECHO:$3 
		{: RESULT = new Secuencia($2.toArray(new Sentencia[$2.size()])); :}
	|	MIENTRAS:$1 bexp:$2 HACER:$3 stmt:$4 
		{: RESULT = new MientrasHacer($2, $4); :}
	|	SI:$1 bexp:$2 ENTONCES:$3 stmt:$4 SINO:$5 stmt:$6 
		{: RESULT = new SiEntoncesSino($2, $4, $6); :}
	|	SI:$1 bexp:$2 ENTONCES:$3 stmt:$4
		{: RESULT = new SiEntonces($2, $4); :}
;
aexp ::=
		NUM:$1 
		{: RESULT = new Numeral($1); :}
	|	ID:$1 
		{: RESULT = new Variable($1); :}
	|	aexp:$1 SIGNO_MULT:$2 aexp:$3 
		{: RESULT = new Multiplicacion($1, $3); :}
	|	aexp:$1 SIGNO_MAS:$2 aexp:$3 
		{: RESULT = new Suma($1, $3); :}
	|	aexp:$1 SIGNO_MENOS:$2 aexp:$3 
		{: RESULT = new Resta($1, $3); :}
	|	PARENTESIS_IZQUIERDO:$1 aexp:$2 PARENTESIS_DERECHO:$3 
		{: RESULT = $2; :}
;
bexp ::=
		VERDADERO:$1 
		{: RESULT = new ValorVerdad(true); :}
	|	FALSO:$1 
		{: RESULT = new ValorVerdad(false); :}
	|	aexp:$1 SIGNO_IGUAL:$2 aexp:$3 
		{: RESULT = new CompararIgual($1, $3); :}
	|	aexp:$1 SIGNO_MENOR_IGUAL:$2 aexp:$3 
		{: RESULT = new CompararMenorOIgual($1, $3); :}
	|	aexp:$1 SIGNO_MAYOR_IGUAL:$2 aexp:$3 
		{: RESULT = new CompararMayorOIgual($1, $3); :}
	|	SIGNO_NO:$1 bexp:$2 
		{: RESULT = new Negacion($2); :}
	|	bexp:$1 SIGNO_Y:$2 bexp:$3 
		{: RESULT = new Conjuncion($1, $3); :}
	|	PARENTESIS_IZQUIERDO:$1 bexp:$2 PARENTESIS_DERECHO:$3 
		{: RESULT = $2; :}
;
repeat$stmt ::=
		
		{: List<Sentencia> $0;
		$0 = new ArrayList<Sentencia>();
		RESULT = $0; :}
	|	repeat$stmt:$1 stmt:$2 
		{: List<Sentencia> $0;
		$1.add($2); $0 = $1;
		RESULT = $0; :}
;

repeat$param ::=
		
		{: List<Variable> $0;
		$0 = new ArrayList<Variable>();
		RESULT = $0; :}
	|	repeat$param:$1 param:$2 
		{: List<Variable> $0;
		$1.add($2); $0 = $1;
		RESULT = $0; :}
;